{"version":3,"sources":["TodoContext/index.js","TodoContext/useLocalStorage.js","TodoCounter/index.js","TodoSearch/index.js","TodoList/index.js","TodoItem/index.js","TodoForm/index.js","CreateTodoButton/index.js","Modal/index.js","App/AppUI.js","App/index.js","index.js"],"names":["TodoContext","React","createContext","TodoProvider","props","itemName","initialValue","useState","error","setError","loading","setLoading","item","setItem","useEffect","setTimeout","parsedItem","localStorageItem","localStorage","getItem","JSON","parse","stringify","saveItem","newItem","stringifiedTodos","useLocalStorage","todos","saveTodos","openModal","setOpenModal","searchValue","setSearchValue","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","searchText","includes","Provider","value","addTodo","newTodos","push","completeTodo","todoIndex","findIndex","deleteTodo","splice","children","TodoCounter","useContext","className","TodoSearch","placeholder","onChange","event","target","TodoList","TodoItem","onClick","onComplete","onDelete","TodoForm","newTodoValue","setNewTodoValue","onSubmit","preventDefault","type","CreateTodoButton","prevState","Modal","ReactDOM","createPortal","document","getElementById","AppUI","Fragment","map","App","render"],"mappings":"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","file":"static/js/main.d47c9263.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useLocalStorage } from \"./useLocalStorage\"\r\n\r\nconst TodoContext = React.createContext();\r\n\r\nfunction TodoProvider (props){\r\n\r\n  /* Se obtienen los TODOS guardados en el localStorage con la variable \"todos\", se actualizan con \"saveItem\" y se obtienen las variables \"loading\" y \"error\"\r\n     para simbolizar si se estan obteniendo los datos y si hay un error respectivamente */\r\n  const {item: todos, saveItem: saveTodos, loading, error} = useLocalStorage('TODOS_V1',[]);\r\n\r\n  // Se declara variable con getter \"openModal\" y setter \"setOpenModal\" con el objetivo de indicar cuando se debe mostrar el modal\r\n  const [openModal, setOpenModal] = React.useState(false);\r\n\r\n  // Se declara variable con getter \"searchValue\" y setter \"setSearchValue\" con el objetivo de almacenar los TODOS filtrados\r\n  const [searchValue, setSearchValue] = React.useState('');\r\n\r\n  // Se obtienen los TODOS que estén es estado completado\r\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\r\n\r\n  // Se obtienen la cantidad de TODOS\r\n  const totalTodos = todos.length;\r\n\r\n  // Se declara variable auxiliar de los TODOS buscados\r\n  let searchedTodos = [];\r\n\r\n  // Si no se ha ingresado datos al buscador entonces se despliegan todos los TODOS, de lo contrario, se buscan los TODOS que incluyan el texto ingresado\r\n  if (!searchValue.length >= 1) {\r\n    searchedTodos = todos;\r\n  } else {\r\n    searchedTodos = todos.filter(todo => {\r\n      const todoText = todo.text.toLowerCase();\r\n      const searchText = searchValue.toLowerCase();\r\n      return todoText.includes(searchText);\r\n    });\r\n  }\r\n\r\n  // Función que obtiene el texto del TODO a completar y lo completa\r\n  const completeTodo = (text) => {\r\n    const todoIndex = todos.findIndex(todo => todo.text === text);\r\n    const newTodos = [...todos];\r\n    newTodos[todoIndex].completed = true;\r\n    saveTodos(newTodos);\r\n  };\r\n\r\n  // Función que obtiene el texto del TODO a borrar y lo borra\r\n  const deleteTodo = (text) => {\r\n    const todoIndex = todos.findIndex(todo => todo.text === text);\r\n    const newTodos = [...todos];\r\n    newTodos.splice(todoIndex, 1);\r\n    saveTodos(newTodos);\r\n  };\r\n\r\n    // Función que añade TODO\r\n    const addTodo = (text) => {\r\n      const newTodos = [...todos];\r\n      newTodos.push({\r\n        completed: false,\r\n        text,\r\n      });\r\n      saveTodos(newTodos);\r\n    };\r\n  \r\n\r\n    return(\r\n        <TodoContext.Provider value={{\r\n            error,\r\n            loading,\r\n            totalTodos,\r\n            completedTodos,\r\n            searchValue,\r\n            setSearchValue,\r\n            searchedTodos,\r\n            addTodo,\r\n            completeTodo,\r\n            deleteTodo,\r\n            openModal,\r\n            setOpenModal\r\n        }}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    );\r\n}\r\n\r\nexport { TodoContext, TodoProvider };\r\n","import React from \"react\";\r\n\r\n// Se crea React Hook para gestionar guardado en local storage\r\nfunction useLocalStorage(itemName, initialValue){\r\n\r\n    // Se crea un react state con un un valor \"false\" inicial, con un getter \"error\" y un setter \"setError\" para simbolizar si se obtuvo error al obtener datos\r\n    const[error, setError] = React.useState(false);\r\n  \r\n    // Se crea un react state con un un valor \"true\" inicial, con un getter \"loading\" y un setter \"setLoading\" para simbolizar obtención de datos de API\r\n    const[loading, setLoading] = React.useState(true);\r\n  \r\n    // Se crea un react state con una variable dinámica \"initialValue\" con un getter \"item\" y un setter \"setItem\"\r\n    const [item, setItem] = React.useState(initialValue);\r\n  \r\n    // Se simula una espera de 1s para obtención de datos de API\r\n    React.useEffect(() => { // Lo que esté dentro de useEffect no se ejecuta siempre que hay un render\r\n      setTimeout(() => {\r\n        \r\n        try{\r\n          const localStorageItem = localStorage.getItem(itemName); // Se crea la constante que contiene los valores guardadados en el local storage\r\n          let parsedItem; // Se declara una variable auxiliar\r\n    \r\n          // Si no hay información en el local storage se le asigna el valor inicial, de lo contrario se le pasa la información que se obtenga a la variable auxiliar \r\n          if(!localStorageItem){\r\n            localStorage.setItem(itemName,JSON.stringify(initialValue));\r\n            parsedItem = initialValue;\r\n          } else{\r\n            parsedItem = JSON.parse(localStorageItem);\r\n          }\r\n    \r\n          // Se le pasa a \"item\" el valor obtenido en el localStorage\r\n          setItem(parsedItem);\r\n    \r\n          // Se asigna a la variable que simboliza la espera de la obtención de la información en false\r\n          setLoading(false);\r\n        }\r\n        // Si ocurre un error se le asigna el error a la variable dinámica\r\n        catch(error){\r\n          setError(error);\r\n        }\r\n  \r\n      }, 1000);\r\n    });\r\n  \r\n    // Función para guardar los cambios que se le hagan a la variable dinámica \"parsedItem\" en el localStorage\r\n    const saveItem = (newItem) => {\r\n      try{\r\n        const stringifiedTodos = JSON.stringify(newItem);\r\n        localStorage.setItem(itemName, stringifiedTodos);\r\n        setItem(newItem);\r\n      }catch(error){\r\n        setError(error);\r\n      }\r\n    };\r\n  \r\n    // Cada vez que se llame a nuestro hook personalizado daremos un getter \"item\" para obtener el valor actual y un \"saveItem\" para guardar el valor que se le pase\r\n    return {\r\n      item,\r\n      saveItem,\r\n      loading,\r\n      error\r\n    };\r\n  }\r\n\r\n  export { useLocalStorage };","import React from 'react';\nimport { TodoContext } from '../TodoContext';\nimport './TodoCounter.css';\n\nfunction TodoCounter() {\n\n  const { totalTodos, completedTodos } = React.useContext(TodoContext);\n\n  return (\n    <h2 className=\"TodoCounter\">Has completado {completedTodos} de {totalTodos} TODOs</h2>\n  );\n}\n\nexport { TodoCounter };\n","import React from 'react';\nimport { TodoContext } from '../TodoContext';\nimport './TodoSearch.css';\n\nfunction TodoSearch() {\n\n  const { searchValue, setSearchValue } = React.useContext(TodoContext);\n\n  const onSearchValueChange = (event) => {\n    setSearchValue(event.target.value);\n  };\n\n  return (\n    <input\n      className=\"TodoSearch\"\n      placeholder=\"Cebolla\"\n      value={searchValue}\n      onChange={onSearchValueChange}\n    />\n  );\n}\n\nexport { TodoSearch };\n","import React from 'react';\nimport './TodoList.css'\n\nfunction TodoList(props) {\n  return (\n    <section>\n      <ul>\n        {props.children}\n      </ul>\n    </section>\n  );\n}\n\nexport { TodoList };\n","import React from 'react';\nimport './TodoItem.css';\n\nfunction TodoItem(props) {\n  return (\n    <li className=\"TodoItem\">\n      <span\n        className={`Icon Icon-check ${props.completed && 'Icon-check--active'}`}\n        onClick={props.onComplete}\n      >\n        √\n      </span>\n      <p className={`TodoItem-p ${props.completed && 'TodoItem-p--complete'}`}>\n        {props.text}\n      </p>\n      <span\n        className=\"Icon Icon-delete\"\n        onClick={props.onDelete}\n      >\n        X\n      </span>\n    </li>\n  );\n}\n\nexport { TodoItem };\n","import React from 'react';\r\nimport { TodoContext } from '../TodoContext';\r\nimport './TodoForm.css';\r\n\r\nfunction TodoForm() {\r\n  const [newTodoValue, setNewTodoValue] = React.useState('');\r\n  const {\r\n    addTodo,\r\n    setOpenModal,\r\n  } = React.useContext(TodoContext);\r\n  \r\n  const onChange = (event) => {\r\n    setNewTodoValue(event.target.value);\r\n  };\r\n  const onCancel = () => {\r\n    setOpenModal(false);\r\n  };\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    addTodo(newTodoValue);\r\n    setOpenModal(false);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <label>Escribe tu nuevo TODO</label>\r\n      <textarea\r\n        value={newTodoValue}\r\n        onChange={onChange}\r\n        placeholder=\"Cortar la cebolla oara el almuerzo\"\r\n      />\r\n      <div className=\"TodoForm-buttonContainer\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"TodoForm-button TodoForm-button--cancel\"\r\n          onClick={onCancel}\r\n          >\r\n          Cancelar\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"TodoForm-button TodoForm-button--add\"\r\n        >\r\n          Añadir\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport { TodoForm };","import React from 'react';\nimport './CreateTodoButton.css';\n\nfunction CreateTodoButton(props) {\n  const onClickButton = () => {\n    props.setOpenModal(prevState => !prevState);\n  };\n  \n  return (\n    <button\n      className=\"CreateTodoButton\"\n      onClick={onClickButton}\n    >\n      +\n    </button>\n  );\n}\n\nexport { CreateTodoButton };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Modal.css';\r\n\r\nfunction Modal({ children }) {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"ModalBackground\">\r\n      {children}\r\n    </div>,\r\n    document.getElementById('modal')\r\n  );\r\n}\r\n\r\nexport { Modal };","import React from 'react';\nimport { TodoCounter } from '../TodoCounter';\nimport { TodoSearch } from '../TodoSearch';\nimport { TodoList } from '../TodoList';\nimport { TodoItem } from '../TodoItem';\nimport { TodoForm } from '../TodoForm';\nimport { CreateTodoButton } from '../CreateTodoButton';\nimport { TodoContext } from '../TodoContext';\nimport { Modal } from '../Modal';\n\nfunction AppUI() {\n\n  const { error, loading, searchedTodos, completeTodo, deleteTodo, openModal, setOpenModal } = React.useContext(TodoContext);\n\n  return (\n    <React.Fragment>\n      <TodoCounter />\n      <TodoSearch />\n\n      <TodoList>\n        {error && <p>Desesperate, hubo un error...</p>}\n        {loading && <p>Estamos cargando, no desesperes....</p>}\n        {(!loading && !searchedTodos.length) && <p>Crea tu primer TODO</p>}\n\n        {searchedTodos.map(todo => (\n          <TodoItem\n            key={todo.text}\n            text={todo.text}\n            completed={todo.completed}\n            onComplete={() => completeTodo(todo.text)}\n            onDelete={() => deleteTodo(todo.text)}\n          />\n        ))}\n      </TodoList>\n\n      {!!openModal && (\n        <Modal>\n          <TodoForm/>\n        </Modal>\n      )}\n\n      <CreateTodoButton\n        setOpenModal={setOpenModal}\n      />\n\n    </React.Fragment>\n  );\n}\n\nexport { AppUI };\n","import React from 'react';\nimport { AppUI } from './AppUI';\nimport { TodoProvider } from '../TodoContext';\n\n// Función que se ejecuta de primero al renderizar la página\nfunction App() {\n  return (\n    <TodoProvider>\n      <AppUI/>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/index.js';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}